// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CollectFees extends ethereum.Event {
  get params(): CollectFees__Params {
    return new CollectFees__Params(this);
  }
}

export class CollectFees__Params {
  _event: CollectFees;

  constructor(event: CollectFees) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Meme404Created extends ethereum.Event {
  get params(): Meme404Created__Params {
    return new Meme404Created__Params(this);
  }
}

export class Meme404Created__Params {
  _event: Meme404Created;

  constructor(event: Meme404Created) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get params(): Meme404CreatedParamsStruct {
    return changetype<Meme404CreatedParamsStruct>(
      this._event.parameters[2].value.toTuple(),
    );
  }

  get tiers(): Array<Meme404CreatedTiersStruct> {
    return this._event.parameters[3].value.toTupleArray<Meme404CreatedTiersStruct>();
  }
}

export class Meme404CreatedParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class Meme404CreatedTiersStruct extends ethereum.Tuple {
  get baseURL(): string {
    return this[0].toString();
  }

  get nftName(): string {
    return this[1].toString();
  }

  get nftSymbol(): string {
    return this[2].toString();
  }

  get amountThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get nftId(): BigInt {
    return this[4].toBigInt();
  }

  get lowerId(): BigInt {
    return this[5].toBigInt();
  }

  get upperId(): BigInt {
    return this[6].toBigInt();
  }

  get isFungible(): boolean {
    return this[7].toBoolean();
  }
}

export class MemeCreated extends ethereum.Event {
  get params(): MemeCreated__Params {
    return new MemeCreated__Params(this);
  }
}

export class MemeCreated__Params {
  _event: MemeCreated;

  constructor(event: MemeCreated) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get params(): MemeCreatedParamsStruct {
    return changetype<MemeCreatedParamsStruct>(
      this._event.parameters[2].value.toTuple(),
    );
  }
}

export class MemeCreatedParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class MemeKOLCreated extends ethereum.Event {
  get params(): MemeKOLCreated__Params {
    return new MemeKOLCreated__Params(this);
  }
}

export class MemeKOLCreated__Params {
  _event: MemeKOLCreated;

  constructor(event: MemeKOLCreated) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get params(): MemeKOLCreatedParamsStruct {
    return changetype<MemeKOLCreatedParamsStruct>(
      this._event.parameters[2].value.toTuple(),
    );
  }
}

export class MemeKOLCreatedParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class MemeLiquidityAdded extends ethereum.Event {
  get params(): MemeLiquidityAdded__Params {
    return new MemeLiquidityAdded__Params(this);
  }
}

export class MemeLiquidityAdded__Params {
  _event: MemeLiquidityAdded;

  constructor(event: MemeLiquidityAdded) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountMeme(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountETH(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MemecoinBuy extends ethereum.Event {
  get params(): MemecoinBuy__Params {
    return new MemecoinBuy__Params(this);
  }
}

export class MemecoinBuy__Params {
  _event: MemecoinBuy;

  constructor(event: MemecoinBuy) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountMeme(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MemecoinExit extends ethereum.Event {
  get params(): MemecoinExit__Params {
    return new MemecoinExit__Params(this);
  }
}

export class MemecoinExit__Params {
  _event: MemecoinExit;

  constructor(event: MemecoinExit) {
    this._event = event;
  }

  get memeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountMeme(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TreasuryUpdated extends ethereum.Event {
  get params(): TreasuryUpdated__Params {
    return new TreasuryUpdated__Params(this);
  }
}

export class TreasuryUpdated__Params {
  _event: TreasuryUpdated;

  constructor(event: TreasuryUpdated) {
    this._event = event;
  }

  get oldTreasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTreasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Memeception__createMemeResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Memeception__createMemeInputParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class Memeception__createMeme404Result {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Memeception__createMeme404InputParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class Memeception__createMeme404InputTiersStruct extends ethereum.Tuple {
  get baseURL(): string {
    return this[0].toString();
  }

  get nftName(): string {
    return this[1].toString();
  }

  get nftSymbol(): string {
    return this[2].toString();
  }

  get amountThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get nftId(): BigInt {
    return this[4].toBigInt();
  }

  get lowerId(): BigInt {
    return this[5].toBigInt();
  }

  get upperId(): BigInt {
    return this[6].toBigInt();
  }

  get isFungible(): boolean {
    return this[7].toBoolean();
  }
}

export class Memeception__createMemeKOLResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Memeception__createMemeKOLInputParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class Memeception__getMemeceptionResultValue0Struct extends ethereum.Tuple {
  get targetETH(): BigInt {
    return this[0].toBigInt();
  }

  get collectedETH(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get pool(): Address {
    return this[3].toAddress();
  }

  get swapFeeBps(): i32 {
    return this[4].toI32();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get startAt(): BigInt {
    return this[6].toBigInt();
  }

  get endedAt(): BigInt {
    return this[7].toBigInt();
  }
}

export class Memeception extends ethereum.SmartContract {
  static bind(address: Address): Memeception {
    return new Memeception("Memeception", address);
  }

  WETH9(): Address {
    let result = super.call("WETH9", "WETH9():(address)", []);

    return result[0].toAddress();
  }

  try_WETH9(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH9", "WETH9():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bypassLock(): boolean {
    let result = super.call("bypassLock", "bypassLock():(bool)", []);

    return result[0].toBoolean();
  }

  try_bypassLock(): ethereum.CallResult<boolean> {
    let result = super.tryCall("bypassLock", "bypassLock():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createMeme(
    params: Memeception__createMemeInputParamsStruct,
  ): Memeception__createMemeResult {
    let result = super.call(
      "createMeme",
      "createMeme((string,string,uint40,uint16,uint16,bytes32,address,uint256)):(address,address)",
      [ethereum.Value.fromTuple(params)],
    );

    return new Memeception__createMemeResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_createMeme(
    params: Memeception__createMemeInputParamsStruct,
  ): ethereum.CallResult<Memeception__createMemeResult> {
    let result = super.tryCall(
      "createMeme",
      "createMeme((string,string,uint40,uint16,uint16,bytes32,address,uint256)):(address,address)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Memeception__createMemeResult(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  createMeme404(
    params: Memeception__createMeme404InputParamsStruct,
    tiers: Array<Memeception__createMeme404InputTiersStruct>,
  ): Memeception__createMeme404Result {
    let result = super.call(
      "createMeme404",
      "createMeme404((string,string,uint40,uint16,uint16,bytes32,address,uint256),(string,string,string,uint256,uint256,uint256,uint256,bool)[]):(address,address)",
      [ethereum.Value.fromTuple(params), ethereum.Value.fromTupleArray(tiers)],
    );

    return new Memeception__createMeme404Result(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_createMeme404(
    params: Memeception__createMeme404InputParamsStruct,
    tiers: Array<Memeception__createMeme404InputTiersStruct>,
  ): ethereum.CallResult<Memeception__createMeme404Result> {
    let result = super.tryCall(
      "createMeme404",
      "createMeme404((string,string,uint40,uint16,uint16,bytes32,address,uint256),(string,string,string,uint256,uint256,uint256,uint256,bool)[]):(address,address)",
      [ethereum.Value.fromTuple(params), ethereum.Value.fromTupleArray(tiers)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Memeception__createMeme404Result(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  createMemeKOL(
    params: Memeception__createMemeKOLInputParamsStruct,
  ): Memeception__createMemeKOLResult {
    let result = super.call(
      "createMemeKOL",
      "createMemeKOL((string,string,uint40,uint16,uint16,bytes32,address,uint256)):(address,address)",
      [ethereum.Value.fromTuple(params)],
    );

    return new Memeception__createMemeKOLResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_createMemeKOL(
    params: Memeception__createMemeKOLInputParamsStruct,
  ): ethereum.CallResult<Memeception__createMemeKOLResult> {
    let result = super.tryCall(
      "createMemeKOL",
      "createMemeKOL((string,string,uint40,uint16,uint16,bytes32,address,uint256)):(address,address)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Memeception__createMemeKOLResult(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMemeception(
    memeToken: Address,
  ): Memeception__getMemeceptionResultValue0Struct {
    let result = super.call(
      "getMemeception",
      "getMemeception(address):((uint256,uint256,uint256,address,uint16,address,uint40,uint40))",
      [ethereum.Value.fromAddress(memeToken)],
    );

    return changetype<Memeception__getMemeceptionResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getMemeception(
    memeToken: Address,
  ): ethereum.CallResult<Memeception__getMemeceptionResultValue0Struct> {
    let result = super.tryCall(
      "getMemeception",
      "getMemeception(address):((uint256,uint256,uint256,address,uint16,address,uint40,uint40))",
      [ethereum.Value.fromAddress(memeToken)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Memeception__getMemeceptionResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getPricePerETH(memeToken: Address): BigInt {
    let result = super.call(
      "getPricePerETH",
      "getPricePerETH(address):(uint256)",
      [ethereum.Value.fromAddress(memeToken)],
    );

    return result[0].toBigInt();
  }

  try_getPricePerETH(memeToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPricePerETH",
      "getPricePerETH(address):(uint256)",
      [ethereum.Value.fromAddress(memeToken)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  testAdmin(): Address {
    let result = super.call("testAdmin", "testAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_testAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("testAdmin", "testAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uncxLocker(): Address {
    let result = super.call("uncxLocker", "uncxLocker():(address)", []);

    return result[0].toAddress();
  }

  try_uncxLocker(): ethereum.CallResult<Address> {
    let result = super.tryCall("uncxLocker", "uncxLocker():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  v3Factory(): Address {
    let result = super.call("v3Factory", "v3Factory():(address)", []);

    return result[0].toAddress();
  }

  try_v3Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("v3Factory", "v3Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  v3PositionManager(): Address {
    let result = super.call(
      "v3PositionManager",
      "v3PositionManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_v3PositionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "v3PositionManager",
      "v3PositionManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vesting(): Address {
    let result = super.call("vesting", "vesting():(address)", []);

    return result[0].toAddress();
  }

  try_vesting(): ethereum.CallResult<Address> {
    let result = super.tryCall("vesting", "vesting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vesting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _multisig(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyMemecoinCall extends ethereum.Call {
  get inputs(): BuyMemecoinCall__Inputs {
    return new BuyMemecoinCall__Inputs(this);
  }

  get outputs(): BuyMemecoinCall__Outputs {
    return new BuyMemecoinCall__Outputs(this);
  }
}

export class BuyMemecoinCall__Inputs {
  _call: BuyMemecoinCall;

  constructor(call: BuyMemecoinCall) {
    this._call = call;
  }

  get memeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyMemecoinCall__Outputs {
  _call: BuyMemecoinCall;

  constructor(call: BuyMemecoinCall) {
    this._call = call;
  }
}

export class CollectFeesCall extends ethereum.Call {
  get inputs(): CollectFeesCall__Inputs {
    return new CollectFeesCall__Inputs(this);
  }

  get outputs(): CollectFeesCall__Outputs {
    return new CollectFeesCall__Outputs(this);
  }
}

export class CollectFeesCall__Inputs {
  _call: CollectFeesCall;

  constructor(call: CollectFeesCall) {
    this._call = call;
  }

  get memeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectFeesCall__Outputs {
  _call: CollectFeesCall;

  constructor(call: CollectFeesCall) {
    this._call = call;
  }
}

export class CreateMemeCall extends ethereum.Call {
  get inputs(): CreateMemeCall__Inputs {
    return new CreateMemeCall__Inputs(this);
  }

  get outputs(): CreateMemeCall__Outputs {
    return new CreateMemeCall__Outputs(this);
  }
}

export class CreateMemeCall__Inputs {
  _call: CreateMemeCall;

  constructor(call: CreateMemeCall) {
    this._call = call;
  }

  get params(): CreateMemeCallParamsStruct {
    return changetype<CreateMemeCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateMemeCall__Outputs {
  _call: CreateMemeCall;

  constructor(call: CreateMemeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class CreateMemeCallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class CreateMeme404Call extends ethereum.Call {
  get inputs(): CreateMeme404Call__Inputs {
    return new CreateMeme404Call__Inputs(this);
  }

  get outputs(): CreateMeme404Call__Outputs {
    return new CreateMeme404Call__Outputs(this);
  }
}

export class CreateMeme404Call__Inputs {
  _call: CreateMeme404Call;

  constructor(call: CreateMeme404Call) {
    this._call = call;
  }

  get params(): CreateMeme404CallParamsStruct {
    return changetype<CreateMeme404CallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get tiers(): Array<CreateMeme404CallTiersStruct> {
    return this._call.inputValues[1].value.toTupleArray<CreateMeme404CallTiersStruct>();
  }
}

export class CreateMeme404Call__Outputs {
  _call: CreateMeme404Call;

  constructor(call: CreateMeme404Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class CreateMeme404CallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class CreateMeme404CallTiersStruct extends ethereum.Tuple {
  get baseURL(): string {
    return this[0].toString();
  }

  get nftName(): string {
    return this[1].toString();
  }

  get nftSymbol(): string {
    return this[2].toString();
  }

  get amountThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get nftId(): BigInt {
    return this[4].toBigInt();
  }

  get lowerId(): BigInt {
    return this[5].toBigInt();
  }

  get upperId(): BigInt {
    return this[6].toBigInt();
  }

  get isFungible(): boolean {
    return this[7].toBoolean();
  }
}

export class CreateMemeKOLCall extends ethereum.Call {
  get inputs(): CreateMemeKOLCall__Inputs {
    return new CreateMemeKOLCall__Inputs(this);
  }

  get outputs(): CreateMemeKOLCall__Outputs {
    return new CreateMemeKOLCall__Outputs(this);
  }
}

export class CreateMemeKOLCall__Inputs {
  _call: CreateMemeKOLCall;

  constructor(call: CreateMemeKOLCall) {
    this._call = call;
  }

  get params(): CreateMemeKOLCallParamsStruct {
    return changetype<CreateMemeKOLCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateMemeKOLCall__Outputs {
  _call: CreateMemeKOLCall;

  constructor(call: CreateMemeKOLCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class CreateMemeKOLCallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get startAt(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeBps(): i32 {
    return this[3].toI32();
  }

  get vestingAllocBps(): i32 {
    return this[4].toI32();
  }

  get salt(): Bytes {
    return this[5].toBytes();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get targetETH(): BigInt {
    return this[7].toBigInt();
  }
}

export class ExitMemecoinCall extends ethereum.Call {
  get inputs(): ExitMemecoinCall__Inputs {
    return new ExitMemecoinCall__Inputs(this);
  }

  get outputs(): ExitMemecoinCall__Outputs {
    return new ExitMemecoinCall__Outputs(this);
  }
}

export class ExitMemecoinCall__Inputs {
  _call: ExitMemecoinCall;

  constructor(call: ExitMemecoinCall) {
    this._call = call;
  }

  get memeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountMeme(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExitMemecoinCall__Outputs {
  _call: ExitMemecoinCall;

  constructor(call: ExitMemecoinCall) {
    this._call = call;
  }
}

export class SetBypassLockCall extends ethereum.Call {
  get inputs(): SetBypassLockCall__Inputs {
    return new SetBypassLockCall__Inputs(this);
  }

  get outputs(): SetBypassLockCall__Outputs {
    return new SetBypassLockCall__Outputs(this);
  }
}

export class SetBypassLockCall__Inputs {
  _call: SetBypassLockCall;

  constructor(call: SetBypassLockCall) {
    this._call = call;
  }

  get _bypassLock(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetBypassLockCall__Outputs {
  _call: SetBypassLockCall;

  constructor(call: SetBypassLockCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _newTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
